Highest-Grossing Items
This is the same question as problem #12 in the SQL Chapter of Ace the Data Science Interview!

Assume you're given a table containing data on Amazon customers and their spending on products in different category, write a query to identify the top two highest-grossing products within each category in the year 2022. The output should include the category, product, and total spend.

product_spend Table:
Column Name	Type
category	string
product	string
user_id	integer
spend	decimal
transaction_date	timestamp
product_spend Example Input:
category	product	user_id	spend	transaction_date
appliance	refrigerator	165	246.00	12/26/2021 12:00:00
appliance	refrigerator	123	299.99	03/02/2022 12:00:00
appliance	washing machine	123	219.80	03/02/2022 12:00:00
electronics	vacuum	178	152.00	04/05/2022 12:00:00
electronics	wireless headset	156	249.90	07/08/2022 12:00:00
electronics	vacuum	145	189.00	07/15/2022 12:00:00
Example Output:
category	product	total_spend
appliance	refrigerator	299.99
appliance	washing machine	219.80
electronics	vacuum	341.00
electronics	wireless headset	249.90
Explanation:
Within the "appliance" category, the top two highest-grossing products are "refrigerator" and "washing machine."

In the "electronics" category, the top two highest-grossing products are "vacuum" and "wireless headset."

The dataset you are querying against may have different input & output - this is just an example!


with cte as(
SELECT * , extract( year from transaction_date) as yea
FROM product_spend
where extract( year from transaction_date)=2022),
cte2 as(
select category, product , sum(spend) over(
partition by category, product) as total_spend 
from cte),
cte3 as(
select category, product , total_spend , dense_rank()
over(partition by category  order by total_spend desc) as d1
from cte2 group by category , product , total_spend)
select category, product , total_spend
from cte3 where d1<=2



2) Top 5 Artists

Assume there are three Spotify tables: artists, songs, and global_song_rank, which contain information about the artists, songs, and music charts, respectively.

Write a query to find the top 5 artists whose songs appear most frequently in the Top 10 of the global_song_rank table. Display the top 5 artist names in ascending order, along with their song appearance ranking.

If two or more artists have the same number of song appearances, they should be assigned the same ranking, and the rank numbers should be continuous (i.e. 1, 2, 2, 3, 4, 5). If you've never seen a rank order like this before, do the rank window function tutorial.

artists Table:
Column Name	Type
artist_id	integer
artist_name	varchar
label_owner	varchar
artists Example Input:
artist_id	artist_name	label_owner
101	Ed Sheeran	Warner Music Group
120	Drake	Warner Music Group
125	Bad Bunny	Rimas Entertainment
songs Table:
Column Name	Type
song_id	integer
artist_id	integer
name	varchar
songs Example Input:
song_id	artist_id	name
55511	101	Perfect
45202	101	Shape of You
22222	120	One Dance
19960	120	Hotline Bling
global_song_rank Table:
Column Name	Type
day	integer (1-52)
song_id	integer
rank	integer (1-1,000,000)
global_song_rank Example Input:
day	song_id	rank
1	45202	5
3	45202	2
1	19960	3
9	19960	15
Example Output:
artist_name	artist_rank
Ed Sheeran	1
Drake	2
Explanation:
Ed Sheeran's song appeared twice in the Top 10 list of global song rank while Drake's song is only listed once. Therefore, Ed is ranked #1 and Drake is ranked #2.

The dataset you are querying against may have different input & output - this is just an example!


with cte as(select a.artist_id , a.artist_name ,
a1.song_id, a1.name 
from artists a join songs a1
on a.artist_id=a1.artist_id),
cte2 as(
select c1.*, g.rank , g.day from cte c1
join global_song_rank g
on c1. song_id= g.song_id
where g.rank<=10),
cte3 as(
select artist_name , count(*) as C
from cte2
group by artist_name
),
cte4 as(
select artist_name , dense_rank() over( order by c desc) as artist_rank
from cte3) 
select * from cte4 where artist_rank<=5
