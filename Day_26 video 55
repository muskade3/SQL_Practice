script:
Create table candidates(
id int primary key,
positions varchar(10) not null,
salary int not null);

test case 1:
insert into candidates values(1,'junior',5000);
insert into candidates values(2,'junior',7000);
insert into candidates values(3,'junior',7000);
insert into candidates values(4,'senior',10000);
insert into candidates values(5,'senior',30000);
insert into candidates values(6,'senior',20000);

test case 2:
insert into candidates values(20,'junior',10000);
insert into candidates values(30,'senior',15000);
insert into candidates values(40,'senior',30000);

test case 3:
insert into candidates values(1,'junior',15000);
insert into candidates values(2,'junior',15000);
insert into candidates values(3,'junior',20000);
insert into candidates values(4,'senior',60000);

test case 4:
insert into candidates values(10,'junior',10000);
insert into candidates values(40,'junior',10000);
insert into candidates values(20,'senior',15000);
insert into candidates values(30,'senior',30000);
insert into candidates values(50,'senior',15000);


Solution:-

WITH cte AS (
    SELECT *, 
           ROW_NUMBER() OVER (PARTITION BY positions ORDER BY salary) AS rn,
           SUM(salary) OVER (PARTITION BY positions ORDER BY salary) AS sump
    FROM candidates
),
cte2 AS (
    SELECT * 
    FROM cte
    WHERE sump <= 50000 AND positions = 'senior'
),
cte3 AS (
    SELECT * 
    FROM cte
    WHERE positions = 'junior'
      AND sump <= 50000 - COALESCE((SELECT SUM(salary) FROM cte2), 0)
),
cte4 AS (
    SELECT * FROM cte2 
    UNION ALL
    SELECT * FROM cte3
),
cte5 AS (
    SELECT positions, COUNT(*) AS cn 
    FROM cte4
    GROUP BY positions
)
SELECT 
    MAX(CASE WHEN positions = 'junior' THEN cn END) AS Junior,
    MAX(CASE WHEN positions = 'senior' THEN cn END) AS Senior
FROM cte5;

test case 3:-
Junior  senior
3	NULL
